{"version":3,"sources":["components/HomePage/HomePage.js","components/Board/Piece/Piece.js","constants.js","components/Board/Square/Square.js","components/Board/Board.js","socket.js","redux/gamePieces.js","redux/helpers.js","redux/reducers/gameReducer.js","redux/actions/game.js","redux/actions/actionTypes.js","components/Game/Game.js","components/Chat/ChatMessage/ChatMessage.js","components/Chat/ChatHeader/ChatHeader.js","components/Chat/ChatControls/ChatControls.js","components/Chat/Chat.js","components/GamePage/GamePage.js","App.js","serviceWorker.js","index.js","components/Board/Square/Square.module.css","components/Board/Board.module.css","components/Board/Piece/Piece.module.css","images/Pawn_White.svg","images/Pawn_Dark.svg","images/Bishop_White.svg","images/Bishop_Dark.svg","images/King_White.svg","images/King_Dark.svg","images/Queen_White.svg","images/Queen_Dark.svg","images/Knight_White.svg","images/Knight_Dark.svg","images/Rook_White.svg","images/Rook_Dark.svg"],"names":["HomePage","props","className","to","Piece","pieceSrc","type","dark","pawnDark","pawnWhite","bishopDark","bishopWhite","kingDark","kingWhite","queenDark","queenWhite","rookDark","rookWhite","knightDark","knightWhite","src","alt","styles","WHITE","BLACK","Square","classes","isLight","push","light","pieceType","isChecked","constants","red","join","onClick","onClickHandler","isPossible","Dot","Board","board","i","row","j","squares","index","player","isEven","possibleMoves","includes","key","Row","reverse","num","socket","io","Pawn","this","initialPositions","position","destination","isOccupied","pieceRow","Math","floor","destinationRow","hasMoved","indexOf","Rook","checkRookMove","checkRookPath","abs","path","sort","a","b","bigger","smaller","differrence","Bishop","checkBishopMove","checkBishopPath","coordY","coordX","coordY2","coordX2","pathStart","pathEnd","incrementBy","Knight","Queen","King","filterLegalMoves","legalMove","pathToDestination","findPossibleMoves","piecePosition","moves","length","isMovePossible","Boolean","findAllMoves","enemyCoords","filter","val","map","v","enemyPiece","Set","flat","verifyChecked","enemyMoves","king","getMoves","piece","kingPosition","enemy","possibleMove","newSquares","allEnemyMoves","initializeGame","initialState","Array","fill","initialBoardState","whoMoves","selected","kingsSelector","state","kings","forEach","possibleMovesSelector","gameStateSelector","myCoords","getAllMoves","select","Game","playerId","restoredBoardState","useSelector","game","gameState","isCheckedSelector","boardDispatch","useDispatch","useEffect","startGame","onMove","console","log","move","on","off","setPlayer","emit","ChatMessage","messageClasses","authorClasses","message","user","text","ChatHeader","children","ChatControls","chatMessage","onChange","inputRef","onSend","messageEnd","value","onKeyDown","event","ref","Chat","sendMessage","chatMessages","messagesContainer","useRef","useState","setChatMessage","useCallback","target","emptyField","scroll","current","scrollHeight","clientHeight","scrollTo","top","behavior","connected","error","boardState","roomId","pageReducer","action","Error","GamePage","useReducer","gamePageState","dispatchgamePage","setChatMessages","roomData","setRoomData","roomQuery","URLSearchParams","location","search","room","get","random","callback","trim","func","messages","URL","window","href","origin","reducer","combineReducers","newBoard","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","App","component","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.4c7b1b48.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './HomePage.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst HomePage = (props) => {\r\n    return (\r\n        <div className={'home-page'}>\r\n            <header className=\"section-header\">\r\n                <h1 className=\"header-primary\">React Chess Game</h1>\r\n            </header>\r\n\r\n            <main className=\"section-main\">\r\n                <nav className=\"navigation\">\r\n                    <ul className=\"navigation__list\">\r\n                        <li className={'navigation__item'}><Link className='navigation__link' to='/game?random=true'>Play with\r\n                            random Player</Link></li>\r\n                        <li className={'navigation__item'}><Link className='navigation__link' to='/game?random=false'>Play with\r\n                            Friend</Link></li>\r\n                    </ul>\r\n                </nav>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport {HomePage};","import React from \"react\";\r\nimport styles from './Piece.module.css'\r\n\r\nimport pawnWhite from '../../../images/Pawn_White.svg';\r\nimport pawnDark from '../../../images/Pawn_Dark.svg';\r\nimport bishopWhite from '../../../images/Bishop_White.svg';\r\nimport bishopDark from '../../../images/Bishop_Dark.svg';\r\nimport kingWhite from '../../../images/King_White.svg';\r\nimport kingDark from '../../../images/King_Dark.svg';\r\nimport queenWhite from '../../../images/Queen_White.svg';\r\nimport queenDark from '../../../images/Queen_Dark.svg';\r\nimport knightWhite from '../../../images/Knight_White.svg';\r\nimport knightDark from '../../../images/Knight_Dark.svg';\r\nimport rookWhite from '../../../images/Rook_White.svg';\r\nimport rookDark from '../../../images/Rook_Dark.svg';\r\n\r\n\r\nconst Piece = (props) => {\r\n    let pieceSrc = '';\r\n    switch (props.type) {\r\n        case 'pawn':\r\n            pieceSrc = props.dark ? pawnDark : pawnWhite;\r\n            break;\r\n        case 'bishop':\r\n            pieceSrc = props.dark ? bishopDark : bishopWhite;\r\n            break;\r\n        case 'king':\r\n            pieceSrc = props.dark ? kingDark : kingWhite;\r\n            break;\r\n        case 'queen':\r\n            pieceSrc = props.dark ? queenDark : queenWhite;\r\n            break;\r\n        case 'rook':\r\n            pieceSrc = props.dark ? rookDark : rookWhite;\r\n            break;\r\n        case 'knight':\r\n            pieceSrc = props.dark ? knightDark : knightWhite;\r\n            break;\r\n        default:\r\n    }\r\n    return <img src={pieceSrc} alt=\"pawn\" className={styles.Piece}/>\r\n};\r\n\r\nexport {Piece}","export const WHITE = 'WHITE';\r\nexport const BLACK = 'BLACK';\r\nexport const DONE = 'DONE';\r\n","import React from \"react\";\r\nimport styles from './Square.module.css'\r\nimport {Piece} from \"../Piece/Piece\";\r\nimport * as constants from \"../../../constants\";\r\n\r\nconst Square = (props) => {\r\n    let classes = [styles.Square];\r\n    props.isLight ? classes.push(styles.light) : classes.push(styles.dark);\r\n\r\n    if(props.pieceType === 'king'){\r\n        if(props.dark && props.isChecked === constants.BLACK) classes.push(styles.red);\r\n        if(!props.dark && props.isChecked === constants.WHITE) classes.push(styles.red);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.join(' ')} onClick={props.onClickHandler}>\r\n            {/*{props.index}*/}\r\n            {props.pieceType && <Piece type={props.pieceType} dark={props.dark}/>}\r\n            {props.isPossible && <div className={styles.Dot}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport {Square};","import React from \"react\";\r\nimport styles from './Board.module.css'\r\nimport {Square} from \"./Square/Square\";\r\nimport * as constants from \"../../constants\";\r\n\r\n\r\nconst Board = (props) => {\r\n    let board = [];\r\n    for (let i = 0; i < 8; i++) {\r\n        let row = [];\r\n\r\n        for(let j = 0; j<8; j++){\r\n            row.push( <Square pieceType={props.squares[i*8+j]?.type}\r\n                              index={i*8+j}\r\n                              dark={props.squares[i*8+j]?.player !== constants.WHITE}\r\n                              onClickHandler={() => props.onClickHandler(i*8+j)}\r\n                              isLight={isEven(i) ? isEven(j) : !isEven(j)}\r\n                              isPossible={props.possibleMoves.includes(i*8+j)}\r\n                              isChecked={props.isChecked}\r\n                              key={''+i+j}/> );\r\n        }\r\n\r\n        board.push(<div className={styles.Row} key={i}>{row}</div>)\r\n    }\r\n    if (props.player !== constants.WHITE)board.reverse();\r\n    return (\r\n        <div className={styles.Board}>{board}</div>\r\n    );\r\n};\r\n\r\nfunction isEven(num) {\r\n    return num % 2 === 0\r\n}\r\n\r\nexport {Board};","import io from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"/\";\r\n\r\nconst socket = io(ENDPOINT);\r\n\r\nexport { socket };\r\n","import * as constants from \"../constants\";\r\n\r\nexport class Pawn {\r\n    constructor(player) {\r\n        this.player = player;\r\n        this.type = 'pawn';\r\n        this.initialPositions = {\r\n            [constants.WHITE]: [48, 49, 50, 51, 52, 53, 54, 55],\r\n            [constants.BLACK]: [8, 9, 10, 11, 12, 13, 14, 15]\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        // let result = `{player:${this.player},type:${this.type}}`;\r\n        return {player: this.player, type: this.type};\r\n    }\r\n\r\n    isMovePossible(position, destination, isOccupied) {\r\n\r\n        let isPossible = false;\r\n        let pieceRow = Math.floor(position / 8);\r\n        let destinationRow = Math.floor(destination / 8);\r\n        let hasMoved = this.initialPositions[this.player].indexOf(position) !== -1;\r\n\r\n        if (this.player === constants.WHITE) {\r\n            if ((position - 8 === destination // check if move forvard is possible\r\n                || (hasMoved && position - 16 === destination)) //if first move check if move two squares is possible\r\n                && !isOccupied //\r\n                && (pieceRow - 1 === destinationRow || (hasMoved && pieceRow - 2 === destinationRow))) isPossible = true;    //check if rows is correct, because when pawn is on border it can jump through rows\r\n            if ((position - 9 === destination || position - 7 === destination)\r\n                && isOccupied\r\n                && pieceRow - 1 === destinationRow) isPossible = true; // check if take is possible\r\n\r\n        }\r\n\r\n        if (this.player === constants.BLACK) {\r\n            if ((position + 8 === destination\r\n                || (hasMoved && position + 16 === destination))\r\n                && !isOccupied\r\n                && (pieceRow + 1 === destinationRow || (hasMoved && pieceRow + 2 === destinationRow))) isPossible = true;\r\n            if ((position + 9 === destination || position + 7 === destination)\r\n                && isOccupied\r\n                && pieceRow + 1 === destinationRow) isPossible = true;\r\n\r\n        }\r\n        return isPossible;\r\n    }\r\n\r\n    pathToDestination(position, destination) {\r\n        if (destination === position - 16) {\r\n            return [position - 8];\r\n        } else if (destination === position + 16) {\r\n            return [position + 8];\r\n        }\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport class Rook {\r\n    constructor(player) {\r\n        this.player = player;\r\n        this.type = 'rook';\r\n    }\r\n\r\n    isMovePossible(position, destination) {\r\n        return Rook.checkRookMove(position, destination);\r\n    }\r\n\r\n    //pathToDestination need to later check if there is pieces on the way\r\n    pathToDestination(position, destination) {\r\n        return Rook.checkRookPath(position, destination);\r\n    }\r\n\r\n    //need static methods because want to reuse it for queen\r\n    static checkRookMove(position, destination) {\r\n        let pieceRow = Math.floor(position / 8);\r\n        let destinationRow = Math.floor(destination / 8);\r\n\r\n        let sameCol = Math.abs(position - destination) % 8 === 0;\r\n        let sameRow = pieceRow === destinationRow;\r\n\r\n        return sameCol || sameRow;\r\n    }\r\n\r\n    static checkRookPath(position, destination) {\r\n        let path = [];\r\n        let [bigger, smaller] = [position, destination].sort((a, b) => b - a);\r\n        let differrence = bigger - smaller;\r\n        if (bigger - smaller < 8) for (let i = differrence - 1; i >= 1; i--) path.push(bigger - i);  //for row\r\n        else for (let i = differrence - 8; i >= 8; i -= 8) path.push(bigger - i); //for col\r\n        return path;\r\n    }\r\n\r\n}\r\n\r\nexport class Bishop {\r\n    constructor(player) {\r\n        this.player = player;\r\n        this.type = 'bishop';\r\n    }\r\n\r\n    isMovePossible(position, destination) {\r\n        return Bishop.checkBishopMove(position, destination)\r\n    }\r\n\r\n    //pathToDestination need to later check if there is pieces on the way\r\n    pathToDestination(position, destination) {\r\n        return Bishop.checkBishopPath(position, destination);\r\n    }\r\n\r\n    //need static methods because want to reuse it for queen\r\n    static checkBishopMove(position, destination) {\r\n        let coordY = position % 8;\r\n        let coordX = Math.floor(position / 8);\r\n        let coordY2 = destination % 8;\r\n        let coordX2 = Math.floor(destination / 8);\r\n\r\n        if (coordY + coordX === coordY2 + coordX2) {\r\n            return true;\r\n        }\r\n        if (coordY - coordX === coordY2 - coordX2) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    static checkBishopPath(position, destination) {\r\n        let path = [], pathStart, pathEnd, incrementBy;\r\n        if (position > destination) {\r\n            pathStart = destination;\r\n            pathEnd = position;\r\n        } else {\r\n            pathStart = position;\r\n            pathEnd = destination;\r\n        }\r\n        if (Math.abs(position - destination) % 9 === 0) {\r\n            incrementBy = 9;\r\n            pathStart += 9;\r\n        } else {\r\n            incrementBy = 7;\r\n            pathStart += 7;\r\n        }\r\n\r\n        for (let i = pathStart; i < pathEnd; i += incrementBy) {\r\n            path.push(i);\r\n        }\r\n        return path;\r\n    }\r\n\r\n}\r\n\r\nexport class Knight {\r\n    constructor(player) {\r\n        this.player = player;\r\n        this.type = 'knight';\r\n    }\r\n\r\n    isMovePossible(position, destination) {\r\n        let isPossible = false;\r\n        let coordX = position % 8;\r\n        let coordY = Math.floor(position / 8);\r\n        let coordX2 = destination % 8;\r\n        let coordY2 = Math.floor(destination / 8);\r\n        switch (coordY2 * 8 + coordX2) {\r\n            case (coordY - 2) * 8 + (coordX - 1):\r\n            case (coordY - 2) * 8 + (coordX + 1):\r\n            case (coordY - 1) * 8 + (coordX - 2):\r\n            case (coordY - 1) * 8 + (coordX + 2):\r\n            case (coordY + 1) * 8 + (coordX - 2):\r\n            case (coordY + 1) * 8 + (coordX + 2):\r\n            case (coordY + 2) * 8 + (coordX - 1):\r\n            case (coordY + 2) * 8 + (coordX + 1):\r\n                isPossible = true;\r\n                break;\r\n            default:\r\n                isPossible = false;\r\n        }\r\n        if (Math.abs(coordX2 - coordX) > 2) isPossible = false; //need because if on right border can jump to another end of board\r\n        return isPossible\r\n    }\r\n\r\n    //pathToDestination need to later check if there is pieces on the way\r\n    pathToDestination() {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport class Queen {\r\n    constructor(player) {\r\n        this.player = player;\r\n        this.type = 'queen';\r\n    }\r\n\r\n    isMovePossible(position, destination) {\r\n        return Rook.checkRookMove(position, destination) || Bishop.checkBishopMove(position, destination);\r\n    }\r\n\r\n    //pathToDestination need to later check if there is pieces on the way\r\n    pathToDestination(position, destination) {\r\n        if (Rook.checkRookMove(position, destination)) return Rook.checkRookPath(position, destination);\r\n        else return Bishop.checkBishopPath(position, destination);\r\n    }\r\n\r\n}\r\n\r\nexport class King {\r\n    constructor(player) {\r\n        this.player = player;\r\n        this.type = 'king';\r\n    }\r\n\r\n    isMovePossible(position, destination) {\r\n        let isPossible = false;\r\n        let coordX = position % 8;\r\n        let coordY = Math.floor(position / 8);\r\n        let coordX2 = destination % 8;\r\n        let coordY2 = Math.floor(destination / 8);\r\n        switch (coordY2 * 8 + coordX2) {\r\n            case (coordY + 1) * 8 + (coordX):\r\n            case (coordY) * 8 + (coordX + 1):\r\n            case (coordY + 1) * 8 + (coordX - 1):\r\n            case (coordY - 1) * 8 + (coordX + 1):\r\n            case (coordY + 1) * 8 + (coordX + 1):\r\n            case (coordY - 1) * 8 + (coordX - 1):\r\n            case (coordY - 1) * 8 + (coordX):\r\n            case (coordY) * 8 + (coordX - 1):\r\n                isPossible = true;\r\n                break;\r\n            default:\r\n                isPossible = false;\r\n        }\r\n        if (Math.abs(coordX2 - coordX) > 2) isPossible = false;\r\n        return isPossible;\r\n    }\r\n\r\n    //pathToDestination need to later check if there is pieces on the way\r\n    pathToDestination(position, destination) {\r\n        return [];\r\n    }\r\n\r\n}\r\n","import * as constants from \"../constants\";\r\nimport { Bishop, King, Knight, Pawn, Queen, Rook } from \"./gamePieces\";\r\n\r\nconst filterLegalMoves = (board, position, destination) => {\r\n    let legalMove = true;\r\n    let pathToDestination = board[position].pathToDestination(\r\n        position,\r\n        destination\r\n    );\r\n    for (let index of pathToDestination) {\r\n        //check if some piece blocks the path\r\n        legalMove = legalMove && !board[index];\r\n    }\r\n    return legalMove;\r\n};\r\n\r\n//returns all movese for ONE piece including those leading to check\r\nexport const findPossibleMoves = (board, piecePosition) => {\r\n    let moves = [];\r\n    if (!board[piecePosition]) return [];\r\n    for (let destination = 0; destination < board.length; destination++) {\r\n        //if pieces on square belong to one player - continue\r\n        if (board[piecePosition]?.player === board[destination]?.player)\r\n            continue;\r\n        if (\r\n            board[piecePosition].isMovePossible(\r\n                piecePosition,\r\n                destination,\r\n                Boolean(board[destination])\r\n            )\r\n        ) {\r\n            if (filterLegalMoves(board, piecePosition, destination)) {\r\n                moves.push(destination);\r\n            }\r\n        }\r\n    }\r\n    return moves;\r\n};\r\n\r\n//returns all moves for ALL pieces including those leading to check\r\nexport const findAllMoves = (board, player) => {\r\n    let moves = [];\r\n    let enemyPieces = board.filter(\r\n        (val) => val !== null && val.player === player\r\n    );\r\n    let enemyCoords = enemyPieces.map((v) => board.indexOf(v));\r\n\r\n    for (let enemyPiece of enemyCoords) {\r\n        moves.push(findPossibleMoves(board, enemyPiece));\r\n    }\r\n\r\n    return [...new Set(moves.flat())];\r\n};\r\n\r\nexport const verifyChecked = (enemyMoves, king) => {\r\n    return enemyMoves.includes(king);\r\n};\r\n\r\n//get all moves for ONE piece EXCLUDING those where you might get cheked\r\nexport const getMoves = (board, piece, player, kingPosition) => {\r\n    const enemy =\r\n        player === constants.WHITE ? constants.BLACK : constants.WHITE;\r\n    let moves = findPossibleMoves(board, piece);\r\n    //if place this filter inside findPossibleMoves then it would be recursion, cuz findAllMoves uses findPossibleMoves;\r\n    //check if move leads to king beeing cheked and removes those moves\r\n    moves = moves.filter((possibleMove) => {\r\n        let newSquares = [...board];\r\n        newSquares[piece] = null;\r\n        newSquares[possibleMove] = board[piece];\r\n        let allEnemyMoves = findAllMoves(newSquares, enemy);\r\n\r\n        if (board[piece].type === \"king\")\r\n            return !verifyChecked(allEnemyMoves, possibleMove);\r\n        return !verifyChecked(allEnemyMoves, kingPosition);\r\n    });\r\n    return moves;\r\n};\r\n\r\n//get all  moves for all pieces to check if game ended;\r\nexport const getAllMoves = (board, player, kingPosition) => {\r\n    let moves = [];\r\n    let myPieces = board.filter((val) => val !== null && val.player === player);\r\n    let myCoords = myPieces.map((v) => board.indexOf(v));\r\n\r\n    for (let piece of myCoords) {\r\n        moves.push(getMoves(board, piece, player, kingPosition));\r\n    }\r\n    return moves.flat();\r\n};\r\n\r\nexport function initializeGame(initialState) {\r\n    if (initialState) return restoreGameBoard(initialState);\r\n\r\n    let squares = new Array(64).fill(null);\r\n    for (let i = 9; i < 17; i++) {\r\n        squares[64 - i] = new Pawn(constants.WHITE);\r\n        squares[i - 1] = new Pawn(constants.BLACK);\r\n    }\r\n\r\n    squares[0] = new Rook(constants.BLACK);\r\n    squares[7] = new Rook(constants.BLACK);\r\n    squares[56] = new Rook(constants.WHITE);\r\n    squares[63] = new Rook(constants.WHITE);\r\n\r\n    squares[1] = new Knight(constants.BLACK);\r\n    squares[6] = new Knight(constants.BLACK);\r\n    squares[57] = new Knight(constants.WHITE);\r\n    squares[62] = new Knight(constants.WHITE);\r\n\r\n    squares[2] = new Bishop(constants.BLACK);\r\n    squares[5] = new Bishop(constants.BLACK);\r\n    squares[58] = new Bishop(constants.WHITE);\r\n    squares[61] = new Bishop(constants.WHITE);\r\n\r\n    squares[3] = new Queen(constants.BLACK);\r\n    squares[4] = new King(constants.BLACK);\r\n\r\n    squares[59] = new Queen(constants.WHITE);\r\n    squares[60] = new King(constants.WHITE);\r\n\r\n    return squares;\r\n}\r\n\r\nexport function restoreGameBoard(board) {\r\n    return board.map((v) => {\r\n        if (!v) return null;\r\n        switch (v.type) {\r\n            case \"pawn\":\r\n                return new Pawn(v.player);\r\n            case \"bishop\":\r\n                return new Bishop(v.player);\r\n            case \"knight\":\r\n                return new Knight(v.player);\r\n            case \"rook\":\r\n                return new Rook(v.player);\r\n            case \"queen\":\r\n                return new Queen(v.player);\r\n            case \"king\":\r\n                return new King(v.player);\r\n            default:\r\n                return null;\r\n        }\r\n    });\r\n}\r\n","import * as constants from \"../../constants\";\r\nimport * as actionTypes from \"../actions/actionTypes\"\r\nimport {findAllMoves, getAllMoves, getMoves, initializeGame, verifyChecked} from \"../helpers\";\r\nimport {WHITE} from \"../../constants\";\r\n\r\nlet initialBoardState = {\r\n    board: [], //change\r\n    whoMoves: constants.WHITE,\r\n    enemy: constants.BLACK,\r\n    player: null,\r\n    selected: null\r\n};\r\n\r\n\r\nexport const gameReducer = (state = initialBoardState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.START_GAME:\r\n            return {\r\n                ...state,\r\n                board: initializeGame()\r\n            };\r\n        case actionTypes.RESTORE_GAME:\r\n            return {\r\n                ...state,\r\n                board: initializeGame(action.initialState.board),\r\n                whoMoves: action.initialState.whoMoves,\r\n                enemy: action.initialState.enemy,\r\n                player: action.initialState.player,\r\n                selected: null\r\n            };\r\n        case actionTypes.MOVE:\r\n            let newBoard = [...state.board];\r\n            newBoard[action.position] = null;\r\n            newBoard[action.destination] = state.board[action.position];\r\n            return {\r\n                ...state,\r\n                board: newBoard,\r\n                whoMoves: state.enemy,\r\n                enemy: state.whoMoves,\r\n                selected: null\r\n            };\r\n        case actionTypes.SET_PLAYER:\r\n            return {...state, player: action.player};\r\n        case actionTypes.SELECT:\r\n            return {\r\n                ...state,\r\n                selected: action.selected,\r\n            };\r\n        case actionTypes.UNSELECT:\r\n            return {\r\n                ...state,\r\n                selected: null,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const kingsSelector = (state) => {\r\n    if(state.board.length === 0) return {};\r\n    let kings = {[constants.WHITE]: null, [constants.BLACK]: null};\r\n    state.board.forEach((piece, index) => {\r\n        if (piece?.type === 'king') {\r\n            kings[piece.player] = index\r\n        }\r\n    });\r\n    return kings;\r\n};\r\n\r\nexport const isCheckedSelector = (state) => {\r\n    if(state.board.length === 0) return null;\r\n    let isChecked;\r\n    let allEnemyMoves = findAllMoves(state.board, state.enemy);\r\n    if (verifyChecked(allEnemyMoves, kingsSelector(state)[state.whoMoves])) {\r\n        isChecked = state.whoMoves;\r\n    } else isChecked = null;\r\n    return isChecked;\r\n};\r\n\r\n\r\nexport const possibleMovesSelector = (state) => {\r\n    if(state.board.length === 0) return [];\r\n    if (state.selected !== null) {\r\n        return getMoves(state.board, state.selected, state.whoMoves, kingsSelector(state)[state.whoMoves]);\r\n    } else {\r\n        return [];\r\n    }\r\n};\r\n\r\nexport const gameStateSelector = (state) => {\r\n    if(state.board.length === 0) return null;\r\n    if (getAllMoves(state.board, state.whoMoves, kingsSelector(state)[state.whoMoves]).length === 0) {\r\n        return constants.DONE;\r\n    } else return null;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import * as actionTypes from './actionTypes'\r\n\r\nexport const startGame = (initialState) => {\r\n    return {\r\n        type: actionTypes.START_GAME,\r\n        initialState,\r\n    }\r\n};\r\n\r\nexport const restoreGame = (initialState) => {\r\n    return {\r\n        type: actionTypes.RESTORE_GAME,\r\n        initialState,\r\n    }\r\n};\r\n\r\nexport const setPlayer = (player) => {\r\n    return {\r\n        type: actionTypes.SET_PLAYER,\r\n        player,\r\n    }\r\n};\r\n\r\nexport const move = (position, destination) => {\r\n    return {\r\n        type: actionTypes.MOVE,\r\n        position,\r\n        destination\r\n    }\r\n};\r\n\r\nexport const select = (position) => {\r\n    return {\r\n        type: actionTypes.SELECT,\r\n        selected: position\r\n    }\r\n};\r\n\r\nexport const unselect = () => {\r\n    return {\r\n        type: actionTypes.UNSELECT,\r\n    }\r\n};","// GAME\r\n\r\nexport const START_GAME = 'START_GAME';\r\nexport const RESTORE_GAME = 'RESTORE_GAME';\r\nexport const MOVE = 'MOVE';\r\nexport const SET_PLAYER = 'SET_PLAYER';\r\nexport const SELECT = 'SELECT';\r\nexport const UNSELECT = 'UNSELECT';\r\n\r\n\r\n//CHAT\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport { Board } from \"../Board/Board\";\r\nimport * as constants from \"../../constants\";\r\nimport { socket } from \"../../socket\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    gameStateSelector,\r\n    isCheckedSelector,\r\n    possibleMovesSelector,\r\n} from \"../../redux/reducers/gameReducer\";\r\nimport {\r\n    move,\r\n    restoreGame,\r\n    select,\r\n    setPlayer,\r\n    startGame,\r\n    unselect,\r\n} from \"../../redux/actions/game\";\r\n\r\nconst Game = ({ player: playerId, restoredBoardState }) => {\r\n    let board = useSelector((state) => state.game.board);\r\n    let whoMoves = useSelector((state) => state.game.whoMoves);\r\n    let enemy = useSelector((state) => state.game.enemy);\r\n    let player = useSelector((state) => state.game.player);\r\n\r\n    let gameState = useSelector((state) => gameStateSelector(state.game));\r\n    let isChecked = useSelector((state) => isCheckedSelector(state.game));\r\n    let [selected, possibleMoves] = useSelector((state) => [\r\n        state.game.selected,\r\n        possibleMovesSelector(state.game),\r\n    ]);\r\n    let boardDispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (board.length === 0) {\r\n            if (restoredBoardState)\r\n                boardDispatch(restoreGame(restoredBoardState));\r\n            else boardDispatch(startGame());\r\n        }\r\n        const onMove = ({ position, destination }) => {\r\n            console.log(\"moved\");\r\n            boardDispatch(move(position, destination));\r\n        };\r\n        socket.on(\"move\", onMove);\r\n\r\n        return () => {\r\n            socket.off(\"move\", onMove);\r\n        };\r\n    }, [boardDispatch, board, restoredBoardState, whoMoves, enemy, player]);\r\n\r\n    useEffect(() => {\r\n        boardDispatch(setPlayer(playerId));\r\n    }, [boardDispatch, playerId]);\r\n\r\n    useEffect(() => {\r\n        if (player === enemy)\r\n            socket.emit(\r\n                \"updateBoardState\",\r\n                { board, whoMoves, enemy },\r\n                () => {}\r\n            );\r\n    }, [board, enemy, player, whoMoves]);\r\n\r\n    const onClickHandler = (index) => {\r\n        // if game ended do nothind\r\n        if (gameState === constants.DONE || player !== whoMoves) return;\r\n        //if not selected and there is a pice on square then select\r\n        if (selected === null && board[index]?.player === whoMoves) {\r\n            boardDispatch(select(index));\r\n            return;\r\n        }\r\n        //if selected piece of the same player then reselect\r\n        if (\r\n            board[index]?.player === board[selected]?.player &&\r\n            index !== selected\r\n        ) {\r\n            boardDispatch(select(index));\r\n            return;\r\n        }\r\n        if (index === selected || !possibleMoves.includes(index)) {\r\n            // if clicked on selected piece or illegal move then deselect\r\n            boardDispatch(unselect());\r\n        }\r\n\r\n        // else move piece\r\n        else {\r\n            socket.emit(\r\n                \"move\",\r\n                {\r\n                    position: selected,\r\n                    destination: index,\r\n                },\r\n                () => {}\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Board\r\n                squares={board}\r\n                possibleMoves={possibleMoves}\r\n                onClickHandler={onClickHandler}\r\n                isChecked={isChecked}\r\n                player={player}\r\n            />\r\n            {gameState && (\r\n                <div>\r\n                    GAME ENDED: {enemy === constants.WHITE ? \"WHITE\" : \"BLACK\"}{\" \"}\r\n                    WINS\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\n// let memoGame = React.memo(Game);\r\nexport { Game };\r\n","import React from \"react\";\r\nimport './ChatMessage.css';\r\n\r\n\r\nconst ChatMessage = (props) => {\r\n    const messageClasses = [\"chat__message\"];\r\n    const authorClasses = [\"chat__author\"];\r\n    if(props.message.user === 'admin') messageClasses.push('chat__message-system');\r\n    if(props.message.user === 'WHITE') authorClasses.push('chat__author-white');\r\n    if(props.message.user === 'BLACK') authorClasses.push('chat__author-black');\r\n    return (\r\n                <div className={messageClasses.join(' ')}>\r\n                    <div className={authorClasses.join(' ')}></div>\r\n                    <div className=\"chat__text\">{props.message.text}</div>\r\n                </div>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport {ChatMessage};","import React from \"react\";\r\nimport './ChatHeader.css';\r\n\r\n\r\nconst ChatHeader = (props) => {\r\n    return (\r\n            <h3 className=\"chat__header\">\r\n                {props.children}\r\n            </h3>\r\n    );\r\n};\r\n\r\nexport {ChatHeader};","import React from \"react\";\r\nimport './ChatControls.css';\r\n\r\n\r\nconst ChatControls = ({chatMessage, onChange, inputRef, onSend, messageEnd}) => {\r\n    return (\r\n        <div className=\"chat__controls\">\r\n            <input type=\"text\" className=\"chat__input\" value={chatMessage} onChange={onChange}\r\n                   onKeyDown={event => event.key === 'Enter' ? onSend() : null} ref={inputRef}/>\r\n            <button className=\"btn chat__btn-send\" onClick={onSend}>Send</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport {ChatControls};","import React, {useCallback, useEffect, useRef, useState} from \"react\";\r\nimport './Chat.css';\r\nimport {ChatMessage} from \"./ChatMessage/ChatMessage\";\r\nimport {ChatHeader} from \"./ChatHeader/ChatHeader\";\r\nimport {ChatControls} from \"./ChatControls/ChatControls\";\r\n\r\n\r\nconst Chat = ({sendMessage, chatMessages}) => {\r\n\r\n    // let inputRef = useRef(null);\r\n    let messagesContainer = useRef(null);\r\n    let [chatMessage, setChatMessage] = useState('');\r\n    console.log('chat render');\r\n\r\n    const scrollToBottom = () => {\r\n        const scroll = messagesContainer.current.scrollHeight - messagesContainer.current.clientHeight;\r\n        messagesContainer.current.scrollTo({top:scroll, behavior: \"smooth\" })\r\n    };\r\n    const onChange = useCallback((event) => {\r\n        setChatMessage(event.target.value);\r\n    }, []);\r\n\r\n    const emptyField = () => setChatMessage('');\r\n\r\n    const onSend = (event) =>{\r\n        sendMessage(chatMessage, emptyField);\r\n    };\r\n    useEffect(scrollToBottom, [chatMessages]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader>Chat</ChatHeader>\r\n            <div className=\"chat__messages\" ref={messagesContainer}>\r\n                {chatMessages.map((v, i) =>{\r\n                    return <ChatMessage key={v+i} message={v}></ChatMessage>;\r\n                })}\r\n                {/*<div ref={messagesEndRef} />*/}\r\n            </div>\r\n            <ChatControls onSend={onSend}\r\n                          onChange={onChange}\r\n                          chatMessage={chatMessage}\r\n                          // inputRef={inputRef}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport {Chat};","import React, { useCallback, useEffect, useReducer, useState } from \"react\";\r\nimport \"./GamePage.css\";\r\nimport { Game } from \"../Game/Game\";\r\nimport { Chat } from \"../Chat/Chat\";\r\nimport { socket } from \"../../socket\";\r\n\r\nconst CONNECTED = \"CONNECTED\";\r\nconst DISCONNECTED = \"DISCONNECTED\";\r\nconst ERROR = \"ERROR\";\r\n\r\nconst initialState = {\r\n    connected: false,\r\n    error: false,\r\n    player: null,\r\n    boardState: null,\r\n    roomId: \"\",\r\n};\r\n\r\nconst pageReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case CONNECTED:\r\n            return {\r\n                ...state,\r\n                connected: true,\r\n                player: action.player,\r\n                boardState: action.boardState,\r\n                roomId: action.roomId,\r\n            };\r\n        case DISCONNECTED:\r\n            return {\r\n                ...state,\r\n                connected: false,\r\n            };\r\n        case ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n            };\r\n        default:\r\n            throw new Error(\"GamePage ruducer Error\");\r\n    }\r\n};\r\n\r\nconst GamePage = (props) => {\r\n    const [gamePageState, dispatchgamePage] = useReducer(\r\n        pageReducer,\r\n        initialState\r\n    );\r\n\r\n    let [chatMessages, setChatMessages] = useState([]);\r\n    let [roomData, setRoomData] = useState();\r\n\r\n    useEffect(() => {\r\n        console.log(\"effect\");\r\n        let roomQuery = new URLSearchParams(props.location.search);\r\n        socket.emit(\r\n            \"join\",\r\n            { room: roomQuery.get(\"room\"), random: roomQuery.get(\"random\") },\r\n            ({ error }) => {\r\n                if (error) dispatchgamePage({ type: ERROR, error });\r\n            }\r\n        );\r\n\r\n        socket.on(\"connected\", ({ player, room, boardState }) => {\r\n            setRoomData({ room, random: roomQuery.get(\"random\") });\r\n            // props.history.replace(props.location.pathname+'?room='+room)\r\n            dispatchgamePage({\r\n                type: CONNECTED,\r\n                player: player,\r\n                roomId: room,\r\n                boardState: boardState || null,\r\n            });\r\n        });\r\n\r\n        socket.on(\"disconnect\", () => {\r\n            dispatchgamePage({ type: DISCONNECTED });\r\n        });\r\n\r\n        return () => {\r\n            socket.emit(\"disconnect\");\r\n            socket.off();\r\n        };\r\n    }, [props.location.search]);\r\n\r\n    const sendMessage = useCallback((message, callback = () => {}) => {\r\n        if (message.trim().length !== 0) {\r\n            socket.emit(\"sendMessage\", message, () => {\r\n                callback();\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let func = (message) => {\r\n            setChatMessages((messages) => [...chatMessages, message]);\r\n        };\r\n        socket.on(\"message\", func);\r\n\r\n        return () => {\r\n            socket.off(\"message\", func);\r\n        };\r\n    }, [chatMessages]);\r\n\r\n    let content = null;\r\n\r\n    if (gamePageState.error) {\r\n        content = <div className=\"error\">{gamePageState.error}</div>;\r\n    } else if (!gamePageState.connected) {\r\n        content = <div className=\"error\">Loading...</div>;\r\n    } else {\r\n        content = (\r\n            <div className={\"game-page\"}>\r\n                {roomData.random === \"false\" ? (\r\n                    <p className=\"info\">\r\n                        Give this link to your friend <br />\r\n                        {new URL(window.location.href).origin}/game?room=\r\n                        {roomData.room}\r\n                    </p>\r\n                ) : null}\r\n                <Game\r\n                    player={gamePageState.player}\r\n                    restoredBoardState={gamePageState.boardState}\r\n                />\r\n                <Chat sendMessage={sendMessage} chatMessages={chatMessages} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return content;\r\n};\r\n\r\nexport { GamePage };\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {HomePage} from \"./components/HomePage/HomePage\";\r\nimport {GamePage} from \"./components/GamePage/GamePage\";\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport {gameReducer} from \"./redux/reducers/gameReducer\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nconst reducer = combineReducers({\r\n    game: gameReducer,\r\n});\r\n\r\nlet store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <Provider store={store}>\r\n    <div className=\"App\">\r\n        <Switch>\r\n            <Route path='/game' component={GamePage} />\r\n            <Route path='/' component={HomePage} />\r\n        </Switch>\r\n\r\n    </div>\r\n      </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n          <App />\r\n      </BrowserRouter>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__2KrS2\",\"light\":\"Square_light__pwk_6\",\"dark\":\"Square_dark__2MTbL\",\"red\":\"Square_red__13F61\",\"Dot\":\"Square_Dot__2NVqL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__1x3Wm\",\"Row\":\"Board_Row__2h4Bl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Piece\":\"Piece_Piece__2aT0J\"};","module.exports = __webpack_public_path__ + \"static/media/Pawn_White.9d8cff08.svg\";","module.exports = __webpack_public_path__ + \"static/media/Pawn_Dark.1b9cc35c.svg\";","module.exports = __webpack_public_path__ + \"static/media/Bishop_White.25fd55d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/Bishop_Dark.df256cb4.svg\";","module.exports = __webpack_public_path__ + \"static/media/King_White.29d92e64.svg\";","module.exports = __webpack_public_path__ + \"static/media/King_Dark.a98c8b07.svg\";","module.exports = __webpack_public_path__ + \"static/media/Queen_White.2b51c591.svg\";","module.exports = __webpack_public_path__ + \"static/media/Queen_Dark.5ee93cfc.svg\";","module.exports = __webpack_public_path__ + \"static/media/Knight_White.a2c477d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/Knight_Dark.c6600033.svg\";","module.exports = __webpack_public_path__ + \"static/media/Rook_White.8a34e840.svg\";","module.exports = __webpack_public_path__ + \"static/media/Rook_Dark.f4c02b9b.svg\";"],"sourceRoot":""}